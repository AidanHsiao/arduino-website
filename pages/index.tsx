import Head from "next/head";
import Card from "../components/Card";
import Header from "../components/Header";
import MouseIcon from "../components/MouseIcon";
import NavBar from "../components/NavBar";
import VisibilityContainer from "../components/VisibilityContainer";
import styles from "../styles/Home.module.scss";
import circuit from "../public/circuit.png";
import stateDiagram from "../public/statediagram.png";
import final from "../public/final.png";
import { useState } from "react";

export default function Home() {
  const [codeVisible, setCodeVisibility] = useState(false);
  return (
    <>
      <Head>
        <title>arduino moment heheheha</title>
        <meta name="description" content="Arduino Website" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavBar />
      <MouseIcon />
      <Header />
      <main className={styles.main}>
        <VisibilityContainer>
          <Card
            id="circuit"
            src={circuit}
            title="Components + Circuit"
            subtitle="To make this project happen, we used an LCD, 4 buttons, an RGB LED and wires/resistors to connect them all. The circuit diagram, shown at the left, details how we connected all of these components together. Note that the LCD is has two pins hooked up to the Arduino's AREF and GND pins, please pretend they are the respective SDA and SCL pins. The circuit diagram maker didn't support the use of SDA and SCL."
            side={false}
          />
        </VisibilityContainer>
        <VisibilityContainer>
          <Card
            id="state"
            src={stateDiagram}
            title="The State Diagram"
            subtitle="Everything starts from the title screen, where you can select a song or go into options. If you choose to go into options, two choices will appear; one for scroll speed, and one for offset, both of which can be numerically changed with the serial monitor. If instead you enter the song selection menu, you are presented with a wheel of songs. Selecting one would enter the gameplay."
            side={true}
          />
        </VisibilityContainer>
        <VisibilityContainer>
          <Card
            id="final"
            src={final}
            title="The Final Design"
            subtitle="Our final design is analogous to the circuit diagram, with a two key component placements. First, the 4 buttons are placed in a keyboard-style order underneath the LCD. This is standard for most downscroll rhythm games. Secondly, the RGB LED is placed adjacent to the LCD, in order to make it as easy to see within someone's peripheral vision. We ended up having to work with a normal LCD (which didn't end up having any success), which made the wiring very messy, and the buttons didn't work how we expected. Overall, not a great run-out, but it's a learning experience for sure."
            side={false}
          />
        </VisibilityContainer>
        <div className={styles.codeWrapper}>
          <div
            id="code"
            className={styles.codeButton}
            onClick={() => setCodeVisibility(!codeVisible)}
          >
            Click here to show code
          </div>
          <div
            className={styles.code}
            style={{ height: codeVisible ? "auto" : "0px" }}
          >
            {code.map((item) => (
              <div key={Math.random() * Math.random()}>{item}</div>
            ))}
          </div>
        </div>
      </main>
    </>
  );
}

const code = `
const int mapData[3][4][773] PROGMEM = {{{0,6,30,34,72,78,82,96,102,108,130,144,180,192,216,228,240,246,264,288,300,312,318,336,342,372,408,420,456,468,480,492,504,516,528,540,558,564,600,624,660,672,696,708,720,726,732,738,816,840,864,888,900,912,948,984,1020,1032,1044,1092,1104,1128,1140,1146,1164,1170,1176,1182,1200,1206,1212,1218,1230,1248,1254,1284,1290,1308,1314,1332,1336,1356,1380,1392,1404,1416,1440,1452,1476,1500,1506,1512,1518,1524,1548,1560,1572,1584,1596,1608,1614,1626,1632,1640,1674,1686,1692,1710,1716,1728,1740,1752,1788,1794,1806,1818,1842,1848,1854,1860,1900,1904,1914,1944,1968,1980,1992,2004,2040,2052,2064,2108,2112,2124,2148,2160,2208,2220,2256,2262,2304,2328,2352,2376,2424,2496,2532,2544,2556,2580,2592,2616,2628,2640,2646,2688,2700,2712,2724,2736,2742,2760,2766,2772,2808,2832,2838,2880,2910,2916,2922,2964,2970,2976,2982,2988,3018,3024,3054,3057,3066,3070,3096,3240,3264,3312,3360,3384,3408,3432,3468,3474,3492,3498,3516,3522,3534,3570,3588,3594,3600,3606,3618,3624,3666,3684,3690,3696,3708,3714,3728,3732,3738,3750,3762,3768,3774,3786,3792,3816,3840,3912,3918,3924,3930,3948,3954,3976,3984,4014,4026,4032,4068,4080,4092,4134,4140,4146,4170,4176,4194,4200,4224,4248,4320,4392,4452,4464,4488,4536,4560,4584,4596,4638,4644,4668,4680,4686,4710,4716,4728,4740,4752,4764,4788,4794,4808,4812,4830,4836,4872,4884,4890,4908,4920,4926,4950,4956,4962,4974,4986,4992},{120,204,276,360,384,444,552,576,612,648,780,804,924,960,996,1068,1116,1368,1428,1464,1764,1776,2028,2172,2196,2244,2280,2484,2508,2604,2664,2784,2792,2816,2856,2892,2904,2940,3120,3168,3216,3288,3864,3888,3992,4044,4104,4344,4380,4428,4512,4608,4848},{10,24,48,54,58,90,96,106,126,150,154,166,168,192,198,222,228,270,282,288,294,300,312,384,408,420,456,468,480,516,528,540,576,600,624,660,672,696,708,744,792,840,852,900,936,948,960,1008,1020,1044,1056,1080,1092,1128,1188,1242,1260,1266,1272,1278,1296,1302,1320,1326,1340,1380,1392,1404,1416,1440,1452,1476,1494,1512,1524,1530,1536,1548,1560,1572,1584,1590,1602,1620,1650,1656,1664,1680,1698,1704,1740,1752,1776,1800,1812,1824,1830,1836,1866,1872,1892,1896,1908,1912,1917,1944,1980,2004,2016,2040,2064,2076,2100,2104,2112,2124,2148,2172,2184,2196,2232,2268,2274,2292,2304,2316,2388,2400,2412,2436,2448,2460,2472,2520,2532,2556,2568,2580,2628,2652,2658,2664,2700,2712,2724,2736,2748,2760,2778,2792,2802,2808,2816,2826,2844,2850,2880,2946,2952,2958,2994,3000,3006,3048,3051,3060,3063,3070,3084,3144,3240,3264,3312,3360,3384,3408,3432,3444,3450,3480,3486,3504,3510,3534,3546,3552,3576,3582,3606,3612,3630,3636,3660,3672,3678,3702,3720,3728,3768,3792,3816,3876,3936,3942,3960,4000,4008,4020,4032,4038,4056,4068,4080,4092,4116,4122,4128,4152,4158,4164,4182,4188,4230,4236,4242,4320,4356,4368,4404,4416,4440,4476,4488,4500,4524,4596,4620,4650,4656,4662,4674,4692,4698,4704,4734,4746,4758,4770,4776,4782,4800,4824,4842,4878,4908,4932,4938,4944,4992},{252,324,348,396,432,504,588,636,684,768,828,876,972,1152,1194,1488,1788,1956,2088,2136,2220,2340,2364,2868,2892,2904,2928,3012,3192,3336,3564,3744,3756,3780,3900,3968,4332,4548,4572,4608,4632,4860,4896,4968,4980}},{{6,36,54,66,102,126,192,198,234,246,318,324,342,390,420,450,456,510,516,528,546,552,564,600,618,630,636,672,678,684,714,732,744,762,774,786,810,816,828,834,858,882,906,912,960,966,990,996,1002,1026,1032,1044,1062,1074,1080,1086,1098,1104,1110,1116,1122,1134,1140,1167,1170,1176,1182,1185,1200,1212,1224,1242,1266,1272,1296,1302,1320,1326,1332,1338,1344,1350,1356,1368,1374,1380,1386,1392,1398,1404,1410,1416,1422,1428,1434,1440,1458,1464,1470,1476,1482,1512,1518,1536,1542,1554,1560,1566,1578,1584,1590,1596,1608,1614,1620,1635,1638,1650,1656,1668,1674,1680,1686,1692,1698,1716,1722,1734,1740,1752,1758,1764,1770,1776,1788,1794,1815,1818,1824,1836,1848,1854,1860,1896,1902,1908,1926,1929,1935,1938,1944,1947,1965,1968,1998,2010,2016,2046,2052,2100,2136,2154,2166,2172,2178,2190,2202,2214,2220,2238,2244,2280,2292,2322,2328,2340,2346,2358,2364,2376,2382,2388,2400,2406,2430,2436,2442,2466,2478,2514,2520,2538,2544,2550,2568,2574,2586,2604,2622,2652,2658,2664,2670,2676,2703,2706,2712,2715,2721,2724,2730,2733,2742,2748,2760,2766,2769,2784,2796,2802,2814,2820,2826,2838,2844,2850,2856,2880,2886,2892,2916,2922,2928,2934,2940,2946,2952,2958,2976,2994,3000,3006,3012,3018,3024,3030,3048,3054,3084,3096,3102,3108,3114,3120,3126,3150,3156,3168,3174,3186,3192,3216,3222,3240,3246,3264,3270,3276,3282,3288,3294,3330,3336,3348,3360,3366,3378,3402,3408,3414,3420,3432,3438,3444,3450,3456,3465,3468,3474,3477,3483,3486,3492,3495,3501,3504,3528,3534,3552,3570,3582,3588,3630,3642,3654,3657,3678,3684,3690,3696,3702,3720,3726,3744,3750,3762,3774,3780,3786,3810,3822,3852,3858,3863.25,3870,3875.25,3894,3900,3930,3936,3939,3954,3960,3972,4002,4008,4044,4049.25,4062,4068,4074,4086,4092,4097.25,4110,4119,4122,4128,4134,4152,4164,4170,4182,4188,4194,4206,4212,4224,4230,4233,4242,4248,4257,4260,4266,4272,4296,4302,4314,4320,4368,4446,4467,4512,4518},{150,294,438,486,582,702,870,930,978,984,1014,1056,1146,1158,1194,1254,1260,1278,1290,1314,1362,1446,1494,1506,1530,1626,1644,1662,1710,1806,1830,1878,1884,1956,1992,2022,2070,2118,2262,2310,2454,2502,2562,2598,2628,2646,2694,2778,2790,2808,2832,2868,2898,2910,2964,2982,3042,3066,3078,3138,3162,3180,3198,3210,3228,3252,3312,3354,3384,3558,3606,3666,3708,3738,3798,3846,3882,3906,3915,3924,3990,4038,4338,4356,4374},{6,30,48,54,78,90,102,132,144,174,186,198,240,246,288,306,318,336,342,366,390,414,432,444,462,474,492,498,510,528,540,558,570,576,588,594,624,630,642,648,660,666,678,690,696,708,720,738,792,798,852,888,924,930,942,990,996,1002,1026,1032,1056,1062,1068,1074,1086,1092,1098,1110,1122,1128,1134,1140,1146,1161,1164,1170,1173,1179,1182,1188,1191,1197,1200,1212,1224,1242,1272,1278,1284,1290,1296,1302,1320,1326,1332,1338,1356,1362,1368,1392,1398,1404,1416,1422,1428,1434,1446,1452,1458,1476,1482,1500,1506,1524,1530,1548,1554,1572,1578,1584,1590,1614,1623,1626,1656,1662,1680,1686,1692,1698,1716,1722,1728,1770,1776,1794,1800,1812,1830,1836,1842,1848,1866,1872,1890,1896,1914,1920,1926,1941,1944,1950,1953,1959,1962,1968,1971,1998,2010,2016,2022,2034,2052,2064,2082,2088,2106,2112,2118,2124,2130,2142,2148,2160,2166,2196,2202,2208,2214,2226,2244,2256,2274,2298,2304,2310,2316,2334,2352,2358,2370,2376,2388,2406,2430,2436,2442,2454,2466,2478,2502,2508,2514,2532,2538,2550,2556,2574,2580,2586,2592,2598,2616,2628,2634,2640,2646,2682,2688,2694,2697,2700,2706,2709,2727,2730,2736,2739,2763,2784,2790,2796,2838,2844,2850,2856,2892,2898,2910,2928,2934,2940,2952,2958,2982,2988,2994,3012,3018,3024,3030,3036,3042,3060,3066,3072,3078,3114,3120,3126,3132,3144,3150,3159,3162,3192,3198,3204,3210,3216,3222,3240,3246,3282,3312,3324,3330,3351,3354,3360,3390,3396,3414,3420,3426,3432,3468,3471,3489,3492,3498,3504,3507,3528,3534,3552,3558,3570,3582,3588,3606,3630,3642,3660,3663,3669,3672,3678,3684,3690,3696,3702,3720,3726,3744,3750,3756,3762,3774,3780,3786,3798,3810,3822,3852,3864,3870,3876,3894,3900,3909,3912,3918,3921,3927,3930,3933,3954,3966,3978,3984,3990,3996,4014,4020,4026,4032,4038,4050,4056,4062,4074,4080,4086,4098,4104,4110,4116,4140,4146,4158,4164,4176,4182,4200,4218,4230,4236,4239,4245,4251,4254,4263,4269,4275,4302,4314,4320,4338,4350,4356,4452,4459.5,4515,4518},{750,774,816,834,870,912,954,966,1008,1020,1044,1152,1248,1254,1266,1308,1350,1374,1386,1410,1470,1488,1518,1542,1566,1602,1632,1638,1650,1674,1704,1734,1746,1758,1782,1818,1824,1932,2184,2394,2418,2490,2526,2610,2718,2754,2772,2802,2814,2826,2862,2874,2886,2904,2922,2946,2970,3006,3054,3090,3102,3168,3174,3186,3234,3258,3270,3294,3300,3342,3366,3372,3462,3480,3546,3594,3618,3654,3714,3732,3834,3846,3858,3888,3972,4374}},{{180,186,204,222,243,246,258,261,267,282,285,288,297,300,303,318,324,327,336,339,342,354,357,363,369,378,381,384,414,420,423,435,438,441,450,453,459,465,474,477,480,489,492,495,510,516,519,528,531,534,546,549,555,561,570,573,576,600,606,612,624,627,636,642,648,654,660,666,669,672,678,684,690,693,702,708,714,720,723,732,738,744,750,756,762,765,768,774,780,786,789,798,804,810,813,816,819,822,837,840,843,846,852,858,864,867,873,879,897,900,906,912,918,930,945,948,954,960,972,975,981,984,987,990,996,1002,1014,1026,1029,1032,1038,1041,1050,1056,1068,1071,1083,1092,1110,1122,1125,1128,1134,1137,1146,1152,1164,1167,1188,1206,1218,1221,1224,1230,1233,1242,1248,1260,1263,1284,1302,1314,1317,1320,1338,1344,1356,1359,1380,1383,1392,1395,1404,1413,1416,1425,1431,1434,1437,1443,1452,1455,1461,1464,1476,1479,1494,1497,1503,1506,1512,1515,1518,1524,1542,1545,1554,1560,1572,1575,1578,1584,1587,1596,1602,1605,1614,1620,1626,1632,1635,1644,1647,1656,1659,1668,1671,1680,1695,1698,1704,1716,1719,1728,1731,1740,1776,1779,1785,1788,1800,1806,1809,1812,1815,1821,1824,1836,1842,1845,1854,1860,1866,1878,1884,1890,1896,1908,1920,1926,1932,1950,1956,1974,1986,2004,2010,2016,2025,2046,2058,2064,2094,2106,2112,2118,2145,2148,2154,2166,2169,2176,2178,2184,2187,2190,2192,2202,2205,2212,2214,2220,2223,2226,2228,2250,2262,2280,2292,2298,2304,2334,2352,2358,2361,2370,2376,2382,2400,2406,2412,2418,2424,2430,2436,2442,2448,2457,2466,2505,2514,2526,2529,2535,2541,2544,2547,2562,2568,2571,2577,2580,2583,2598,2604,2607,2613,2616,2619,2634,2640,2643,2649,2652,2655,2670,2676,2679,2685,2688,2691,2706,2712,2715,2721,2724,2727,2742,2748,2751,2757,2760,2763,2778,2784,2787,2793,2796,2799,2814,2820,2823,2829,2832,2835,2850,2856,2859,2865,2868,2871,2880,2886,2892,2898,2907,2910,2916,2940,2943,2952,2955,2964,2970,2976,2988,2994,2997,3006,3039,3042,3051,3054,3060,3066,3072,3078,3084,3093,3096,3102,3108,3114,3120,3126,3144,3147,3150,3156,3159,3174,3183,3189,3192,3198,3210,3219,3225,3228,3237,3240,3246,3252,3258,3267,3270,3279,3285,3288,3306,3312,3315,3330,3333,3342,3345,3351,3354,3360,3363,3381,3384,3408,3414,3417,3426,3432,3435,3444,3450,3453,3462,3465,3471,3474,3480,3486,3498,3504,3510,3516,3522,3531,3534,3537,3543,3546,3555,3558,3567,3570,3576,3594,3618,3636,3639,3648,3651,3660,3663,3696,3699,3705,3708,3720,3726,3729,3732,3735,3741,3744,3756,3762,3765,3774,3780,3786,3798,3804,3810,3816,3828,3840,3846,3852,3870,3876,3894,3906,3924,3930,3936,3945,3966,3978,3984,4014,4026,4032,4038,4065,4068,4074,4086,4089,4096,4098,4104,4107,4110,4112,4122,4125,4132,4134,4140,4143,4146,4148,4170,4206,4212,4218,4224,4230,4257,4260,4266,4281,4284,4326,4338,4344,4350,4356,4362,4368,4377,4380,4392,4401,4404,4410,4416,4434,4440,4449,4452,4458,4464,4467,4473,4476,4488,4494,4497,4500,4503,4509,4512,4524,4530,4533,4542,4548,4554,4566,4572,4578,4584,4596,4608,4614,4620,4641,4644,4686,4698,4704,4710,4716,4722,4728,4746,4758,4761,4782,4785,4788,4794,4800,4806,4812,4818,4824,4827,4839,4842,4845,4848,4851,4866,4872,4875,4881,4884,4887,4902,4908,4911,4917,4920,4923,4938,4944,4947,4953,4956,4959,4974,4980,4983,4989,4992,4995,5010,5016,5019,5025,5028,5031,5046,5052,5055,5061,5064,5067,5082,5088,5091,5097,5100,5103,5118,5124,5127,5133,5136,5139,5154,5160,5163,5169,5172,5175,5190,5196,5199,5205,5208,5211,5220,5226,5238,5241,5244,5247,5262,5274,5277,5280,5283,5298,5310,5313,5316,5319,5334,5346,5349,5352,5355,5370,5382,5385,5388,5391,5406,5418,5421,5424,5427,5442,5454,5457,5460,5463,5478,5490,5493,5496,5499,5514,5526,5529,5532,5535,5550,5574,5586,5592,5598,5604,5616,5625,5628,5640,5646,5652,5658,5661,5664,5670,5676,5688,5694,5718,5724,5730,5736,5754,5766,5772,5793,5814,5817,5838,5862,5868,5874,5880,5886,5898,5904,5913,5916,5922,5928,5946,5964,5970,5976,5985},{0,144,312,399,408,504,591,888,936,1008,1080,1104,1176,1200,1272,1296,1326,1368,1488,1536,1752,1794,1830,1848,1872,1914,1938,1944,1968,1992,2034,2076,2088,2136,2238,2256,2274,2310,2322,2328,2346,2394,2472,2481,2490,2556,2592,2628,2664,2700,2736,2772,2808,2844,2928,2934,3012,3024,3132,3168,3204,3300,3324,3372,3396,3402,3492,3588,3612,3714,3750,3768,3792,3834,3858,3864,3888,3912,3954,3996,4008,4056,4158,4176,4194,4236,4248,4272,4296,4308,4320,4386,4428,4482,4518,4536,4560,4602,4626,4632,4656,4668,4680,4740,4752,4770,4833,4860,4896,4932,4968,5004,5040,5076,5112,5148,5184,5232,5253,5268,5289,5304,5325,5340,5361,5376,5397,5412,5433,5448,5469,5484,5505,5520,5541,5556,5565,5580,5634,5784,5826,5850},{0,144,168,194.25,217.5,222,252,255,270,276,288,291,294,306,309,315,330,333,336,345,348,351,366,372,375,387,390,393,402,405,411,426,429,432,462,468,471,480,483,486,498,501,507,522,525,528,537,540,543,558,564,567,579,582,585,594,597,603,606,612,624,630,636,642,645,654,660,666,669,672,675,684,690,696,702,708,714,720,726,732,738,741,750,756,762,765,768,771,780,786,792,798,804,810,813,816,825,831,849,852,864,870,885,888,891,894,900,906,921,924,933,936,939,942,948,954,966,993,996,1020,1023,1035,1044,1050,1062,1074,1077,1080,1086,1089,1098,1104,1116,1119,1131,1140,1146,1158,1170,1173,1176,1194,1200,1212,1215,1227,1236,1242,1254,1266,1269,1272,1290,1296,1308,1311,1332,1338,1350,1362,1368,1386,1389,1398,1401,1407,1410,1416,1419,1422,1428,1446,1449,1458,1464,1482,1485,1488,1491,1500,1509,1512,1521,1527,1530,1533,1539,1548,1551,1557,1560,1572,1578,1581,1590,1596,1599,1602,1608,1611,1617,1623,1626,1629,1632,1638,1641,1650,1653,1662,1665,1674,1677,1686,1692,1701,1704,1710,1722,1725,1734,1737,1743,1749,1752,1782,1788,1791,1794,1797,1803,1806,1818,1824,1827,1830,1833,1839,1842,1854,1860,1872,1902,1908,1926,1932,1938,1953,1968,1980,1986,1992,1998,2004,2010,2025,2034,2040,2052,2058,2064,2070,2082,2088,2121,2124,2130,2148,2160,2166,2169,2172,2174,2184,2187,2194,2196,2202,2205,2208,2210,2220,2223,2230,2232,2235,2256,2268,2286,2310,2316,2337,2340,2364,2370,2385,2388,2409,2418,2442,2472,2481,2490,2514,2532,2544,2550,2553,2559,2562,2565,2580,2586,2589,2595,2598,2601,2616,2622,2625,2631,2634,2637,2652,2658,2661,2667,2670,2673,2688,2694,2697,2703,2706,2709,2724,2730,2733,2739,2742,2745,2760,2766,2769,2775,2778,2781,2796,2802,2805,2811,2814,2817,2832,2838,2841,2847,2850,2853,2868,2874,2877,2901,2904,2922,2940,2946,2949,2958,2961,2964,2988,2991,3000,3003,3012,3018,3024,3030,3036,3045,3048,3057,3060,3087,3090,3096,3102,3108,3117,3120,3123,3126,3153,3156,3162,3165,3171,3177,3180,3186,3192,3216,3222,3240,3246,3252,3255,3261,3264,3273,3276,3282,3288,3312,3318,3321,3330,3336,3339,3348,3354,3357,3366,3369,3375,3378,3384,3390,3402,3408,3411,3426,3429,3438,3441,3447,3450,3456,3459,3477,3480,3516,3522,3528,3549,3552,3561,3564,3573,3582,3588,3600,3606,3612,3615,3621,3624,3642,3645,3654,3657,3669,3672,3702,3708,3711,3714,3717,3723,3726,3738,3744,3747,3750,3753,3759,3762,3774,3780,3792,3822,3828,3846,3852,3858,3873,3888,3900,3906,3912,3918,3924,3930,3945,3954,3960,3972,3978,3984,3990,4002,4008,4041,4044,4050,4068,4080,4086,4089,4092,4094,4104,4107,4114,4116,4122,4125,4128,4130,4140,4143,4150,4152,4155,4170,4182,4188,4200,4206,4212,4218,4224,4236,4242,4248,4254,4257,4278,4284,4302,4305,4320,4329,4332,4338,4362,4368,4374,4377,4386,4392,4398,4401,4416,4422,4428,4434,4440,4446,4452,4458,4470,4476,4479,4482,4485,4491,4494,4506,4512,4515,4518,4521,4527,4530,4542,4548,4560,4590,4596,4614,4620,4626,4638,4644,4662,4665,4680,4689,4692,4698,4713,4716,4722,4728,4734,4740,4761,4764,4770,4785,4788,4800,4812,4818,4824,4830,4836,4842,4848,4854,4857,4863,4866,4869,4884,4890,4893,4899,4902,4905,4920,4926,4929,4935,4938,4941,4956,4962,4965,4971,4974,4977,4992,4998,5001,5007,5010,5013,5028,5034,5037,5043,5046,5049,5064,5070,5073,5079,5082,5085,5100,5106,5109,5115,5118,5121,5136,5142,5145,5151,5154,5157,5172,5178,5181,5187,5190,5193,5208,5214,5217,5229,5244,5256,5259,5262,5265,5280,5292,5295,5298,5301,5316,5328,5331,5334,5337,5352,5364,5367,5370,5373,5388,5400,5403,5406,5409,5424,5436,5439,5442,5445,5460,5472,5475,5478,5481,5496,5508,5511,5514,5517,5532,5544,5547,5550,5553,5568,5580,5592,5610,5616,5622,5628,5640,5643,5646,5652,5658,5676,5679,5682,5688,5691,5694,5706,5730,5742,5754,5760,5766,5778,5808,5820,5841,5856,5865,5874,5880,5898,5910,5922,5928,5934,5937,5946,5958,5970,5976,5982},{96,240,264,360,447,456,552,618,840,984,1008,1032,1056,1128,1152,1182,1224,1248,1278,1320,1344,1392,1440,1776,1812,1848,1896,1920,1944,1962,2016,2100,2112,2136,2244,2280,2298,2304,2328,2352,2376,2400,2424,2448,2457,2466,2496,2520,2538,2574,2610,2646,2682,2718,2754,2790,2826,2862,2892,2916,2928,2976,2982,3072,3141,3204,3210,3234,3300,3306,3396,3420,3468,3492,3498,3540,3594,3636,3696,3732,3768,3816,3840,3864,3882,3936,4020,4032,4056,4164,4176,4266,4290,4314,4344,4356,4410,4464,4500,4536,4584,4608,4650,4674,4704,4752,4776,4794,4878,4914,4950,4986,5022,5058,5094,5130,5166,5202,5235,5250,5271,5286,5307,5322,5343,5358,5379,5394,5415,5430,5451,5466,5487,5502,5523,5538,5562,5604,5736,5802,5832,5994}}};
const char* mapNames[3] = {"Cutlery","DIVE with U","Non-breath oblige"};
const char* mapArtists[3] = {"Nightcord at 25:00","REDALiCE & t+pazolite & Kobaryo","PinocchioP feat. Hatsune Miku"};
const int mapBPMs[3] = {108,180,148};
const int mapDifficulties[3] = {1, 15, 23};
int beatDivider = 12;

const byte SETTINGS = 0; 
const byte SONG_SELECT = 1; 
const byte DIFFICULTY_SELECT = 2;
const byte GAMEPLAY = 3; 
const byte PAUSED = 4; 
const byte TITLE_SCREEN = 5;
const byte SCROLLSPEED = 6;
const byte OFFSET = 7;

#define ESCAPE 'x'
#define ENTER 'k'

byte currentState = TITLE_SCREEN;

char serialInput;
int serialIntInput;
byte currSong = 0;
int currSpeed = 1000;
int currOffset = 0;

#include <LiquidCrystal.h>
LiquidCrystal lcd(12, 11, 9, 8, 7, 6);

int indexes[4] = {};
int timingIndexes[4] = {};
int renderInstructions[4][10] = {};
char renderData[2][16] = {};
int timingArray[4][10] = {};

byte redPin = 9;
byte greenPin = 10;
byte bluePin = 11;
byte buttonPins[] = {3, 2, 0, 13};

int interval = 500;
int brightness = 255;
unsigned long previousMillis;

void setup() {
  Serial.begin(9600);
  lcd.begin(16, 2);
   for (int i = 9; i <= 11; i++) {
    pinMode(i, OUTPUT);
  }
  pinMode(3, INPUT);
  pinMode(2, INPUT);
  pinMode(13, INPUT);
    Serial.println("Menu: \\n Enter 's' to change settings.\\n Enter 'f' to select songs.");
}

float bps = 1;
float maxBeatDifference = 0;
float previousBeatTime;
float baseTime;


void loop() {
  if (Serial.available()) { // Technically isn't boolean, but the available() method returns an integer, and 0 converts to false while >0 converts to true so it works out :D
    if (currentState == SCROLLSPEED || currentState == OFFSET) {
      serialIntInput = Serial.parseInt();
    } else {
      serialInput = Serial.read(); // read serial monitor
    }
    moveStates();
    printStateUpdates();
  }
  if (currentState == GAMEPLAY) gameplay();
  unsigned long currentMillis = millis();
  brightness = max(255 * (1.0 - float(currentMillis - previousMillis) / 1000.0), 0);
  if (currentMillis - previousMillis < 1000.0) redFade();
}

void moveStates() {
  switch (currentState) {
    case SETTINGS: {
       switch (serialInput) {
        case ESCAPE: currentState = TITLE_SCREEN; break;
        case 'n': currentState = SCROLLSPEED; break; 
        case 'b': currentState = OFFSET; break;
       }
      break;
    }
   case SCROLLSPEED: {
     // speed setting
      currSpeed = serialIntInput;
      Serial.print("Set scroll speed to ");
      Serial.print(currSpeed);
      Serial.println("ms.");
      currentState = SETTINGS;
      printSettings();
     break;
    }
  	case OFFSET: {
      currOffset = serialIntInput;
      Serial.print("Set offset to ");
      Serial.print(currOffset);
      Serial.println("ms.");
      currentState = SETTINGS;
      printSettings();
      break;
    }  
    case SONG_SELECT: {
      switch (serialInput) {
        case ESCAPE: currentState = TITLE_SCREEN; break;
        case ENTER: {
          currentState = GAMEPLAY;
          bps = float(mapBPMs[currSong]) / 60.0;
          Serial.println("Get ready!");
          delay(1000);
          maxBeatDifference = float(currSpeed) / 1000.0 * float(bps) * 12.0;
          baseTime = millis() + 2000;
          break;
        }
        case 'n': {
          // goes to next song
          currSong = (currSong + 1) % (sizeof(mapBPMs) / 2);
          break;    
        }
        case 'b': {
          // goes to previous song
          if(!currSong) {
            currSong = (sizeof(mapBPMs) / 2);
          }
          currSong--;
          break;
        }
      }
      break;
    }
    case DIFFICULTY_SELECT: {
      switch (serialInput) {
        case ESCAPE: currentState = SONG_SELECT; break;
        case 'e': {
          // get the easy difficulty map
          break;
        }
        case 'm': {
          // get the medium difficulty map
          break;
        }
        case 'h': {
          // get the hard difficulty map
          break;
        }
        case ENTER: currentState = GAMEPLAY; break;
      }
      break;
    }
    case GAMEPLAY: {
      if (serialInput == ESCAPE) {
        currentState = PAUSED;
      }
      break;
    }
    case PAUSED: {
      if (serialInput == ESCAPE) currentState = GAMEPLAY;
      if (serialInput == 't') currentState = TITLE_SCREEN;
      break;
    }
    case TITLE_SCREEN: {
      if (serialInput == 's') {
        currentState = SETTINGS;
        printSettings();
      }
      if (serialInput == 'f') {
        currentState = SONG_SELECT;
        printSong();
      }
      break;
    }
  }
}
 
void printSong() {
  Serial.print(mapNames[currSong]);
  Serial.print(" - ");
  Serial.print(mapArtists[currSong]);
  Serial.print(" - Difficulty: ");
  Serial.println(mapDifficulties[currSong]);
  Serial.print("Press ");
  Serial.print(ENTER);
  Serial.println(" to select, press n and b to cycle songs.");
}

void printStateUpdates() {
  switch (currentState) {
    case SCROLLSPEED: {
      // speed setting
      Serial.println("Enter New Integer Scroll Speed: ");
      break;   
    }
    case OFFSET: {
       // offset setting
      Serial.println("Enter New Integer Offset: ");
       break;
 	}
    case SONG_SELECT: {
      if (serialInput == 'n' || serialInput == 'b') printSong();
      break;
    }
    case TITLE_SCREEN: {
      Serial.println("Menu: \\n Enter 's' to change settings.\\n Enter 'f' to select songs.");
      break;
    }
  }
}

void gameplay() {
  float beatTime = float(millis() - baseTime) / 1000 * bps * 12;
  int intTime = int(beatTime);
  if (floor(previousBeatTime) != floor(beatTime)) {
    moveIndexes(intTime);
    previousBeatTime = beatTime;
  }
  generateRenderData(beatTime);
  draw(); 
}

void generateRenderData(float floatTime) {
  int beatTime = int(floatTime);
  for (int i = 0; i < 4; i++) {
    int lookAheadIndex = 0;
    int shallowCopy[10] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
    while (pgm_read_word(&mapData[currSong][i][indexes[i] + lookAheadIndex]) - beatTime < maxBeatDifference) {
      shallowCopy[lookAheadIndex] = pgm_read_word(&mapData[currSong][i][indexes[i] +   lookAheadIndex]);
      lookAheadIndex++;
    }
    int index = 0;
    while (shallowCopy[index] > -1) {
      shallowCopy[index] = map(beatTime, shallowCopy[index] - maxBeatDifference, shallowCopy[index], 15, 0);
      index++;
    }
    for (int j = 0; j < 10; j++) {
      renderInstructions[i][j] = shallowCopy[j];
    }
  }
}

void moveIndexes(int beatTime) {
  for (int i = 0; i < 4; i++) {
    if (beatTime + int(0.3 * 12 * bps) > pgm_read_word(&mapData[currSong][i][indexes[i]])) {
      timingIndexes[i]++;
      previousMillis = millis();
    }
  }
  for (int i = 0; i < 4; i++) {
    if (beatTime > pgm_read_word(&mapData[currSong][i][indexes[i]])) {
      indexes[i]++;
    }
  }
}

void draw() {
  for (int i = 0; i < 2; i++) {
    for (int j = 0; j < 16; j++) {
      renderData[i][j] = '.';
    }
  }
  for (int i = 0; i < 4; i++) {
    byte j = 0;
     for (int j = 0; j < 10; j++) {
       if (renderInstructions[i][j] == -1) continue;
       renderData[i / 2][renderInstructions[i][j]] = i % 2 ? '=' : 'O';
     }
  }
  for (int i = 0; i < 16; i++) {
    Serial.print(renderData[0][15 - i]);
    Serial.print(renderData[1][15 - i]);
    Serial.println("");
  }
}

void rgb(byte red, byte green, byte blue) {
  analogWrite(redPin,red);
  analogWrite(greenPin,green);
  analogWrite(bluePin,blue);
}

void redFade() {
  rgb(brightness, 0, 0);
}

void blueFade() {
  rgb(0, 0, brightness); 
}

void greenFade() {
  rgb(0, brightness, 0); 
}

//values need to be redone
void pinkFade() {
  int red = 220;
  int blue = 255;
  float rVal = (brightness/255.0)*red;
  float bVal = (brightness/255.0)*blue;
  rgb(rVal, 0, bVal); 
}

void printSettings() {
  Serial.print("Scroll Speed (n): "); 
        Serial.print(currSpeed);
        Serial.print(" | Offset (b): ");
        Serial.println(currOffset);
}`.split("\n");
